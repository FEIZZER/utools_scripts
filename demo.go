func ValidateTimeTable(project string ,obj *v1.TimeTable) error {	if obj.Name=="" || len(obj.Name) > NameMaxLength {		return errors.New("wrong timetable name format")	}	if len(obj.Spec.CycleTime) > CycleTimeCap {		return errors.New("too many cycletime")	}	if err := numInRange(obj); err!=nil {		return err	}	c, err := util.GetClientSet(dbconn.KubeConfigPath)	if err != nil {		return err	}	list, err := c.AssetV1().TimeTables(project).List(metav1.ListOptions{})	if err != nil {		return err	}	total := len(list.Items)	if total >= TimeTableCap {		return errors.New("reach timetable capacity")	}	return nil}func numInRange(obj *v1.TimeTable) error  {	gap := obj.Spec.AbsoluteTime.ToTimeStamp - obj.Spec.AbsoluteTime.FromTimeStamp	if gap < 0{		return errors.New("wrong time setting")	} else if obj.Spec.AbsoluteTime.ToTimeStamp==0 && obj.Spec.AbsoluteTime.FromTimeStamp==0 {		return errors.New("must set absolutetime")	}else if gap <= 60 {		return errors.New("time interval is too short")	}	//  判断循环时间	cycleTimeArray := obj.Spec.CycleTime	for _, v := range cycleTimeArray {		if v.ActiveDay > 127 || v.ActiveDay < 1 || v.ToMinute > 59 || v.ToMinute < 0 ||			v.FromMinute > 59 || v.FromMinute < 0 || v.FromHour > 23 || v.FromHour < 0 ||			v.ToHour > 23 || v.ToHour < 0{			return errors.New("wrong cycleTime")		}		if (v.FromHour > v.ToHour) ||			(v.FromHour == v.ToHour && v.FromMinute >= v.ToMinute) {			return errors.New("endtime earlier than starttime")		}	}	return nil}